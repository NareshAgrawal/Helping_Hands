/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Role.AdminRole;
import Business.UserAccount.UserAccount;
import Business.network.Network;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nares
 */
public class ManageEnterpriseAdminJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEnterpriseAdminJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    public ManageEnterpriseAdminJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;

        populateTable();
        populateNetworkComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
     public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = enterprise;
                    row[1] = network.getName();
                    row[2] = userAccount;

                    model.addRow(row);
                }
            }
        }
    }

    private void populateNetworkComboBox(){
        networkJComboBox.removeAllItems();
        
        for (Network network : system.getNetworkList()){
            networkJComboBox.addItem(network);
        }
    }
    
    private void populateEnterpriseComboBox(Network network){
        enterpriseJComboBox.removeAllItems();
        
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            enterpriseJComboBox.addItem(enterprise);
        }
        
    }
    public static boolean isStringOnlyAlphabet(String str)
    {
    return ((!str.equals(""))
            && (str != null)
            && (str.matches("^[a-zA-Z]*$")));
    }
    static boolean isUsernameValid(String email) {
      String regex = "^[a-zA-Z]*$";
      return email.matches(regex);
    }
    static boolean isPasswordValid(String password)
    {
        String regex = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8})";
        //(?=.*[a-z])(?=.*\\d)(?=.*[A-Z])(?=.*[@#$%!]).{6,40}
        return password.matches(regex);
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        usernameJTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        enterpriseJComboBox = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        backJButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        Deletebtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        enterpriseJTable.setBorder(new javax.swing.border.MatteBorder(null));
        enterpriseJTable.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Enterprise Name", "Network", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 182, 523, 95));

        jLabel1.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        jLabel1.setText("Network");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 317, -1, 40));

        jLabel2.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        jLabel2.setText("Username");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 477, -1, 40));

        networkJComboBox.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        networkJComboBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });
        add(networkJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 310, 136, 40));

        usernameJTextField.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        usernameJTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(usernameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 480, 136, 40));

        jLabel3.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        jLabel3.setText("Enterprise");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 397, -1, 40));

        enterpriseJComboBox.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        add(enterpriseJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 136, 40));

        submitJButton.setBackground(new java.awt.Color(102, 102, 255));
        submitJButton.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        submitJButton.setForeground(new java.awt.Color(255, 255, 255));
        submitJButton.setText("Submit");
        submitJButton.setBorder(new javax.swing.border.MatteBorder(null));
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 720, 100, 40));

        jLabel4.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        jLabel4.setText("Password");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 557, -1, 40));

        nameJTextField.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        nameJTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(nameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 640, 136, 40));

        jLabel5.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        jLabel5.setText("Name");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 637, -1, 40));

        passwordJPasswordField.setFont(new java.awt.Font("Palatino Linotype", 0, 18)); // NOI18N
        passwordJPasswordField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        add(passwordJPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 550, 134, 40));

        backJButton.setBackground(new java.awt.Color(102, 102, 102));
        backJButton.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<< Back");
        backJButton.setBorder(new javax.swing.border.MatteBorder(null));
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 102, 80, 40));

        updateButton.setBackground(new java.awt.Color(102, 102, 255));
        updateButton.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.setBorder(new javax.swing.border.MatteBorder(null));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 797, 80, 40));

        Deletebtn.setBackground(new java.awt.Color(102, 102, 255));
        Deletebtn.setFont(new java.awt.Font("Palatino Linotype", 1, 18)); // NOI18N
        Deletebtn.setForeground(new java.awt.Color(255, 255, 255));
        Deletebtn.setText("Delete");
        Deletebtn.setBorder(new javax.swing.border.MatteBorder(null));
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });
        add(Deletebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 797, 80, 40));

        jLabel6.setFont(new java.awt.Font("Perpetua Titling MT", 1, 24)); // NOI18N
        jLabel6.setText("Manage Enterprise Admin");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 22, -1, 40));
    }// </editor-fold>//GEN-END:initComponents

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed

        Network network = (Network) networkJComboBox.getSelectedItem();
        if (network != null){
            populateEnterpriseComboBox(network);
        }

    }//GEN-LAST:event_networkJComboBoxActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

       /* Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();

        String username = usernameJTextField.getText();
        String password = String.valueOf(passwordJPasswordField.getPassword());
        String name = nameJTextField.getText();
        
        if((name == null || name.equals("")) || (username == null || username.equals(""))){
        JOptionPane.showMessageDialog(null, "Name field cannot be empty");
         }else{
        if(enterprise.getEmployeeDirectory().checkIfEmployeeIsUnique(name) && enterprise.getUserAccountDirectory().checkIfUsernameIsUnique(username)){
          if(! passwordPatternCorrect()) {
         JOptionPane.showMessageDialog(null, "Password must be at least 4 characters,\nNo more than 8 characters, \nMust include at least one upper case letter,\nOne lower case letter,\n And one numeric digit");
         passwordJPasswordField.setBorder(BorderFactory.createLineBorder(Color.RED));
         jLabel4.setForeground(Color.red);
        
        }else{
        Employee employee = enterprise.getEmployeeDirectory().createEmployee(name);

        UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, new AdminRole());
        populateTable();
        dB4OUtil.storeSystem(system);
         JOptionPane.showMessageDialog(null, "Created Successfully");
         passwordJPasswordField.setBorder(BorderFactory.createLineBorder(Color.gray));
         jLabel4.setForeground(Color.black);
        usernameJTextField.setText("");
        passwordJPasswordField.setText("");
        nameJTextField.setText("");
     }        
        } else{
                JOptionPane.showMessageDialog(null, "Please enter Unique Employee Details");
            }
        }*/
       
       nameJTextField.setBorder(new LineBorder(new Color(128,128,128)));
        jLabel5.setForeground(Color.BLACK);
        char[] passwordCharArray = passwordJPasswordField.getPassword();
        String password = String.valueOf(passwordCharArray);
        if(isStringOnlyAlphabet(nameJTextField.getText())== false)
        {
            JOptionPane.showMessageDialog(null, "Please enter valid name");
            nameJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
            jLabel5.setForeground(Color.RED);
            return;
        }
        else if (isUsernameValid(usernameJTextField.getText()) == false || usernameJTextField.getText() == null || usernameJTextField.getText().equals(""))
        {
            usernameJTextField.setBorder(BorderFactory.createLineBorder(Color.RED));
            jLabel2.setForeground(Color.RED);
            JOptionPane.showMessageDialog(null, "Username must be Alphabets");
            return;
        }
        else if(isPasswordValid(password) == false || password == null || password.equals(""))
        {
            passwordJPasswordField.setBorder(BorderFactory.createLineBorder(Color.RED));
            jLabel4.setForeground(Color.RED);
            JOptionPane.showMessageDialog(null, "Password must be at least 4 characters,\\nNo more than 8 characters, \\nMust include at least one upper case letter,\\nOne lower case letter,\\n And one numeric digit");
            return ;
        }
        Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();
        if(enterprise== null || enterprise.equals("")){
        JOptionPane.showMessageDialog(null, "Enterprise is blank"); 
            return;
       
    }else{
       
             String username = usernameJTextField.getText();
        String name = nameJTextField.getText();
        for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
            if(username.equalsIgnoreCase(userAccount.getUsername())){
                JOptionPane.showMessageDialog(null, "User Name already exists");
                return;
            }
        }
        Employee employee = enterprise.getEmployeeDirectory().createEmployee(name);
        UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, employee, new AdminRole());
        populateTable();
        dB4OUtil.storeSystem(system);
        JOptionPane.showMessageDialog(null, "Created Successfully");
        usernameJTextField.setText("");
        passwordJPasswordField.setText("");
        nameJTextField.setText("");
            }
    }//GEN-LAST:event_submitJButtonActionPerformed

     /* boolean passwordPatternCorrect() {
       Pattern p = Pattern.compile("^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$");
       Matcher m = p.matcher(passwordJPasswordField.getText());
       boolean b = m.matches();
       return b;
   }*/
    
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int selectedrow= enterpriseJTable.getSelectedRow();
        if (selectedrow>=0)
        {
            UserAccount useraccount= (UserAccount)enterpriseJTable.getValueAt(selectedrow, 2);
            EnterpriseAdminUpdatePanel updatePanel=  new EnterpriseAdminUpdatePanel(userProcessContainer,system,useraccount );
            userProcessContainer.add("EnterpriseAdminUpdatePanel",updatePanel);
            CardLayout layout= (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        else
        {
        JOptionPane.showMessageDialog(null, "Please select an User account to Update");
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnActionPerformed
        // TODO add your handling code here:
         int selectedrow= enterpriseJTable.getSelectedRow();
        if (selectedrow>=0)
        {
            UserAccount useraccount= (UserAccount)enterpriseJTable.getValueAt(selectedrow, 2);
            Enterprise enterprise = (Enterprise)enterpriseJTable.getValueAt(selectedrow, 0);
            enterprise.getUserAccountDirectory().getUserAccountList().remove(useraccount);
             dB4OUtil.storeSystem(system);
            JOptionPane.showMessageDialog(null,"Useraccount Deleted");
            populateTable();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please Select an User account to delete");
        }
    }//GEN-LAST:event_DeletebtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Deletebtn;
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
